@page "/cart"
@using AutoPartsShop.Domain.Dtos
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject AutoPartsShop.Core.Interfaces.ICartService CartService
@inject NavigationManager NavigationManager
@inject MessageService MessageService
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageHeader Title="购物车" />

@if (!_isAuthenticated)
{
	<Empty>
		<DescriptionTemplate>请先登录</DescriptionTemplate>
		<ChildContent>
			<SpaceItem>
				<Button Type="ButtonType.Primary" OnClick="@(() => NavigationManager.NavigateTo("/login"))">登录</Button>
				<Button OnClick="@(() => NavigationManager.NavigateTo("/register"))">注册</Button>
			</SpaceItem>
		</ChildContent>
	</Empty>
}
else if (_cart == null || _cart.Items.Count == 0)
{
	<Empty>
		<DescriptionTemplate>您的购物车为空</DescriptionTemplate>
	</Empty>
	<Button Type="ButtonType.Primary" OnClick="@(() => NavigationManager.NavigateTo("/"))">去逛逛</Button>
}
else
{
	<Table DataSource="@_cart.Items"
	RowKey="@(x => x.Id)"
	Size="TableSize.Small">
		@*   <Column @bind-Content="@context => RenderProduct(context)" />
        <Column Title="单价" @bind-Content="@context => context.Price.ToString(\"C\")" />
        <Column Title="数量" @bind-Content="@context => RenderQuantity(context)" />
        <Column Title="小计" @bind-Content="@context => (context.Price * context.Quantity).ToString(\"C\")" />
        <Column Title="操作" @bind-Content="@context => RenderActions(context)" /> *@
	</Table>

	<div Style="display: flex; justify-content: flex-end; margin-top: 24px;">
		<div Style="width: 300px;">
			<Descriptions Title="结算信息" Size="DescriptionsSize.Small">
				<DescriptionsItem Label="商品数量">@_cart.Items.Sum(i => i.Quantity)</DescriptionsItem>
				<DescriptionsItem Label="商品总价" Style="color: #cf1322; font-weight: bold;">
					¥@_cart.TotalPrice.ToString("N2")
				</DescriptionsItem>
			</Descriptions>
			<Button Type="ButtonType.Primary"
			Size="ButtonSize.Large"
			Style="width: 100%; margin-top: 16px;"
			OnClick="@Checkout">
				去结算 (@_cart.Items.Count 件)
			</Button>
		</div>
	</div>
}

@code {
	private ShoppingCartDto _cart;
	private bool _isAuthenticated;
	private bool _loading = true;

	protected override async Task OnInitializedAsync()
	{
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		_isAuthenticated = authState.User.Identity.IsAuthenticated;

		if (_isAuthenticated)
		{
			await LoadCart();
		}
		else
		{
			_loading = false;
		}
	}

	private async Task LoadCart()
	{
		_loading = true;
		try
		{
			var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
			var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

			if (!string.IsNullOrEmpty(userId))
			{
				_cart = await CartService.GetCartAsync(userId);
			}
		}
		finally
		{
			_loading = false;
		}
	}

	private RenderFragment RenderProduct(CartItemDto item) => __builder =>
	{
		<div Style="display: flex; align-items: center;">
			<img src="@item.ProductImage"
			style="width: 60px; height: 60px; object-fit: cover; margin-right: 12px;"
			onError="@(() => item.ProductImage = "https://via.placeholder.com/60x60?text=No+Image")" />
			<div>
				<div>@item.ProductName</div>
			</div>
		</div>
	};

	private RenderFragment RenderQuantity(CartItemDto item) => __builder =>
	{
		// <InputNumber Min="1"
		//              Max="@GetMaxQuantity(item.ProductId)"
		//              Value="@item.Quantity"
		//              OnChange="@((int value) => UpdateQuantity(item.Id, value))" />
	};

	private RenderFragment RenderActions(CartItemDto item) => __builder =>
	{
		<Button Type="ButtonType.Link" Danger="true" OnClick="@(() => RemoveFromCart(item.Id))">删除</Button>
	};

	private int GetMaxQuantity(int productId)
	{
		var product = _cart.Items.FirstOrDefault(i => i.ProductId == productId);
		if (product == null) return 1;

		// 这里应该从API获取实际库存，为简化示例直接使用一个固定值
		return 100; // 实际应用中应该调用产品服务获取库存
	}

	private async Task UpdateQuantity(int cartItemId, int quantity)
	{
		if (quantity < 1) return;

		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

		if (!string.IsNullOrEmpty(userId))
		{
			UpdateCartItemRequest updateCartItemRequest = new UpdateCartItemRequest
				{
					Quantity = quantity
				};
			await CartService.UpdateCartItemAsync(userId, cartItemId, updateCartItemRequest);
			await LoadCart();
		}
	}

	private async Task RemoveFromCart(int cartItemId)
	{
		var confirm = true;// await MessageService.Confirm("确定要从购物车中移除该商品吗？", "移除确认");
		if (confirm)
		{
			var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
			var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

			if (!string.IsNullOrEmpty(userId))
			{
				await CartService.RemoveFromCartAsync(userId,cartItemId);
				await LoadCart();
			}
		}
	}

	private void Checkout()
	{
		NavigationManager.NavigateTo("/checkout");
	}
}