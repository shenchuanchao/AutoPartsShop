@page "/admin/products"
@using AutoPartsShop.Domain.Models
@inject IProductService ProductService
@inject NavigationManager NavigationManager
@inject MessageService MessageService

<PageHeader Title="商品管理" 
            SubTitle="管理汽修配件商品" 
            OnBack="@(() => NavigationManager.NavigateTo("/admin/dashboard"))" />

<Row Gutter="16" Style="margin-bottom: 16px;">
    <Col Span="6">
        <Input @bind-Value="_searchTerm" Placeholder="商品名称/配件编号" AllowClear="true" />
    </Col>
    <Col Span="4">
        <Select @bind-Value="_selectedCategoryId" 
                Placeholder="选择分类" 
                Style="width: 100%"
                Options="@_categoryOptions" />
    </Col>
    <Col Span="4">
        <Button Type="primary" Icon="search" OnClick="HandleSearch">搜索</Button>
    </Col>
    <Col Span="10" Style="text-align: right;">
        <Button Type="primary" Icon="plus" OnClick="() => NavigationManager.NavigateTo($"/admin/products/create")">添加商品</Button>
    </Col>
</Row>

<Table DataSource="@_products" 
       Loading="@_loading" 
       RowKey="@(x => x.Id)">
    <Column Title="图片" @bind-Content="@context => RenderImage(context)" />
    <Column Title="商品名称" @bind-Content="@context => context.Name" />
    <Column Title="配件编号" @bind-Content="@context => context.PartNumber" />
    <Column Title="价格" @bind-Content="@context => context.Price.ToString(\"C\")" />
    <Column Title="库存" @bind-Content="@context => context.Stock" />
    <Column Title="分类" @bind-Content="@context => context.CategoryName" />
    <Column Title="销量" @bind-Content="@context => context.SalesCount" />
    <Column Title="状态" @bind-Content="@context => RenderStatus(context)" />
    <Column Title="操作" @bind-Content="@context => RenderActions(context)" />
</Table>

<Pagination Total="@_total" 
            CurrentPage="@_currentPage" 
            PageSize="@_pageSize" 
            OnChange="HandlePageChange" 
            ShowSizeChanger="true"
            OnShowSizeChange="HandlePageSizeChange" />

@code {
    private string _searchTerm;
    private Guid? _selectedCategoryId;
    private List<ProductListModel> _products = new();
    private int _total = 0;
    private int _currentPage = 1;
    private int _pageSize = 10;
    private bool _loading = false;
    private List<SelectOption<Guid?>> _categoryOptions = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
        await LoadProducts();
    }

    private async Task LoadCategories()
    {
        // 加载分类选项
        _categoryOptions = new List<SelectOption<Guid?>> 
        {
            new SelectOption<Guid?> { Label = "全部分类", Value = null }
        };
        
        var categories = await _categoryService.GetAllCategoriesAsync();
        _categoryOptions.AddRange(categories.Select(c => 
            new SelectOption<Guid?> { Label = c.Name, Value = c.Id }));
    }

    private async Task LoadProducts()
    {
        _loading = true;
        try
        {
            var result = await ProductService.GetProductsAsync(
                _currentPage, 
                _pageSize, 
                _searchTerm, 
                _selectedCategoryId);
            
            _products = result.Items;
            _total = result.TotalCount;
        }
        catch (Exception ex)
        {
            await MessageService.Error($"加载商品失败: {ex.Message}");
        }
        finally
        {
            _loading = false;
        }
    }

    private RenderFragment RenderImage(ProductListModel product) => __builder =>
    {
        if (!string.IsNullOrEmpty(product.MainImage))
        {
            <img src="@product.MainImage" style="width: 50px; height: 50px; object-fit: cover;" />
        }
        else
        {
            <img src="https://via.placeholder.com/50x50?text=No+Image" 
                 style="width: 50px; height: 50px; object-fit: cover;" />
        }
    };

    private RenderFragment RenderStatus(ProductListModel product) => __builder =>
    {
        if (product.IsOnSale)
        {
            <Badge Status="success" Text="上架" />;
        }
        else
        {
            <Badge Status="default" Text="下架" />;
        }
    };

    private RenderFragment RenderActions(ProductListModel product) => __builder =>
    {
        <SpaceItem>
            <Button Type="link" OnClick="@(() => NavigationManager.NavigateTo($"/admin/products/edit/{product.Id}"))">编辑</Button>
            <Button Type="link" Danger="true" OnClick="@(() => HandleDelete(product.Id))">删除</Button>
            @if (product.IsOnSale)
            {
                <Button Type="link" OnClick="@(() => HandleToggleSale(product.Id, false))">下架</Button>
            }
            else
            {
                <Button Type="link" OnClick="@(() => HandleToggleSale(product.Id, true))">上架</Button>
            }
        </SpaceItem>
    };

    private async Task HandleDelete(Guid id)
    {
        var confirm = await MessageService.Confirm("确定要删除该商品吗？", "删除确认");
        if (confirm)
        {
            try
            {
                await ProductService.DeleteProductAsync(id);
                await LoadProducts();
                await MessageService.Success("删除成功");
            }
            catch (Exception ex)
            {
                await MessageService.Error($"删除失败: {ex.Message}");
            }
        }
    }

    private async Task HandleToggleSale(Guid id, bool isOnSale)
    {
        try
        {
            await ProductService.ToggleSaleStatusAsync(id, isOnSale);
            await LoadProducts();
            await MessageService.Success(isOnSale ? "上架成功" : "下架成功");
        }
        catch (Exception ex)
        {
            await MessageService.Error($"操作失败: {ex.Message}");
        }
    }

    private async Task HandleSearch()
    {
        _currentPage = 1;
        await LoadProducts();
    }

    private async Task HandlePageChange(int page)
    {
        _currentPage = page;
        await LoadProducts();
    }

    private async Task HandlePageSizeChange(int pageSize)
    {
        _pageSize = pageSize;
        _currentPage = 1;
        await LoadProducts();
    }
}