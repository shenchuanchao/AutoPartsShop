@page "/admin/products"
@using AutoPartsShop.Domain.Common
@using AutoPartsShop.Domain.Dtos
@using AutoPartsShop.Domain.Models
@inject AutoPartsShop.Core.Interfaces.ICategoryService CategoryService
@inject AutoPartsShop.Core.Interfaces.IProductService ProductService
@inject NavigationManager NavigationManager
@inject MessageService MessageService

<PageHeader Title="商品管理"
			SubTitle="管理汽修配件商品"
			OnBack="@(() => NavigationManager.NavigateTo("/admin/dashboard"))" />

<Row Gutter="16" Style="margin-bottom: 16px;">
	<Col Span="6">
	<Input @bind-Value="_searchTerm" Placeholder="商品名称/配件编号" AllowClear="true" />
	</Col>
	<Col Span="4">
	<Select Mode="SelectMode.Multiple"
			Placeholder="选择分类"
			@bind-Values="@_selectedCategoryIds"
			TItemValue="string"
			TItem="string"
			OnSelectedItemsChanged="OnSelectedItemsChangedHandler"
			Style="width: 100%; margin-bottom: 8px;"
			EnableSearch
			AllowClear>
		<SelectOptions>
				@foreach (var item in _categoryDic)
				{
				<SelectOption TItemValue="int" TItem="string" Value=@item.Key Label=@item.Value />
				}
		</SelectOptions>
	</Select>
	</Col>
	<Col Span="4">
	<Button Type="ButtonType.Primary" Icon="search" OnClick="HandleSearch">搜索</Button>
	</Col>
	<Col Span="10" Style="text-align: right;">
	<Button Type="ButtonType.Primary" Icon="plus" OnClick="@(() => NavigationManager.NavigateTo($"/admin/products/create"))">添加商品</Button>
	</Col>
</Row>

<Table @ref="_table" TItem="ProductDto" PageSize="5" Total="_total" DataSource="@_products"
	   @bind-SelectedRows="_selectedRows" >
	<TitleTemplate>
		<Flex Justify="FlexJustify.End" Gap="@("10")">
			<Button Type="ButtonType.Primary" >New</Button>
			<Button Disabled="!_selectedRows.Any()" Danger >Delete</Button>
		</Flex>
	</TitleTemplate>
	<ColumnDefinitions Context="row">
		<Selection />
		<GenerateColumns Definitions="@((n,c) => { c.Filterable = true; c.Sortable = true; })" />
		<ActionColumn Title="Action">
			<a >Edit</a>
			<a >Delete</a>
		</ActionColumn>
	</ColumnDefinitions>
</Table>


@code {
	List<ProductDto> mockDb = new();
	IEnumerable<ProductDto> _selectedRows = [];
	ITable _table;
	private string _searchTerm;
	private int _selectedCategoryId;
	IEnumerable<string> _selectedCategoryIds;
	private List<ProductDto> _products;
	private int _total = 0;
	private int _currentPage = 1;
	private int _pageSize = 10;
	private bool _loading = false;
	//创建一个字典
	private Dictionary<int, string> _categoryDic = new();

	protected override async Task OnInitializedAsync()
	{
		await LoadCategories();
		await LoadProducts();
	}

	private async Task LoadCategories()
	{
		// 加载分类选项
		var categories = await CategoryService.GetCategoriesAsync();
		_categoryDic = categories.ToDictionary(c => c.Id, c => c.Name);
		// 如果需要添加默认选项


	}

	private async Task LoadProducts()
	{
		_loading = true;
		try
		{
			ProductQuery productQuery = new ProductQuery();
			productQuery.Page = _currentPage;
			productQuery.PageSize = _pageSize;
			productQuery.SearchTerm = _searchTerm;
			productQuery.CategoryId = _selectedCategoryId;
			var result = await ProductService.GetProductsAsync(productQuery);

			_products = new List<ProductDto>();
			_total = result.TotalCount;
		}
		catch (Exception ex)
		{
			MessageService.Error($"加载商品失败: {ex.Message}");
		}
		finally
		{
			_loading = false;
		}
	}
	

	private RenderFragment RenderImage(Product product) => __builder =>
	{
		if (!string.IsNullOrEmpty(product.ImageUrl))
		{
			<img src="@product.ImageUrl" style="width: 50px; height: 50px; object-fit: cover;" />
		}
		else
		{
			<img src="https://via.placeholder.com/50x50?text=No+Image"
				 style="width: 50px; height: 50px; object-fit: cover;" />
		}
	};

	private RenderFragment RenderStatus(Product product) => __builder =>
	{
		if (product.IsActive)
		{
			<Badge Status="BadgeStatus.Success" Text="上架" />
			;
		}
		else
		{
			<Badge Status="default" Text="下架" />
			;
		}
	};

	private RenderFragment RenderActions(Product product) => __builder =>
	{
		<SpaceItem>
			<Button Type="ButtonType.Link" OnClick="@(() => NavigationManager.NavigateTo($"/admin/products/edit/{product.Id}"))">编辑</Button>
			<Button Type="ButtonType.Link" Danger="true" OnClick="@(() => HandleDelete(product.Id))">删除</Button>
			@if (product.IsActive)
			{
				<Button Type="ButtonType.Link" OnClick="@(() => HandleToggleSale(product.Id, false))">下架</Button>
			}
			else
			{
				<Button Type="ButtonType.Link" OnClick="@(() => HandleToggleSale(product.Id, true))">上架</Button>
			}
		</SpaceItem>
	};

	private async Task HandleDelete(int id)
	{
		var confirm = true;// await MessageService.Confirm("确定要删除该商品吗？", "删除确认");
		if (confirm)
		{
			try
			{
				await ProductService.DeleteProductAsync(id);
				await LoadProducts();
				MessageService.Success("删除成功");
			}
			catch (Exception ex)
			{
				MessageService.Error($"删除失败: {ex.Message}");
			}
		}
	}

	private async Task HandleToggleSale(int id, bool IsActive)
	{
		try
		{
			await ProductService.ToggleSaleStatusAsync(id, IsActive);
			await LoadProducts();
			MessageService.Success(IsActive ? "上架成功" : "下架成功");
		}
		catch (Exception ex)
		{
			MessageService.Error($"操作失败: {ex.Message}");
		}
	}

	private async Task HandleSearch()
	{
		_currentPage = 1;
		await LoadProducts();
	}

	private async Task HandlePageChange(int page)
	{
		_currentPage = page;
		await LoadProducts();
	}

	private async Task HandlePageSizeChange(int pageSize)
	{
		_pageSize = pageSize;
		_currentPage = 1;
		await LoadProducts();
	}
	private void OnSelectedItemsChangedHandler(IEnumerable<string> values)
	{
		if (values != null)
			Console.WriteLine($"selected: ${string.Join(",", values)}");
	}




}